name: CI

# yamllint disable rule:truthy
on:
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*"
    paths-ignore:
      - "art/**"
      - "docs/**"
      - ".github/workflows/docs.yml"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:
# yamllint enable rule:truthy

env:
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - name: Cache
      id: cache-node
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-${{ hashFiles('./package-lock.json') }}
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
        restore-keys: |
          ${{ runner.os }}-node-
    - run: npm ci
      if: steps.cache-node.outputs.cache-hit != 'true'
    - run: npm run build
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend
        path: packages/backend/build
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend
        path: packages/frontend/build

  test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        package: ["backend", "frontend"]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - name: Cache
      id: cache-node
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-${{ hashFiles('./package-lock.json') }}
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
        restore-keys: |
          ${{ runner.os }}-node-
    - run: npm ci
      if: steps.cache-node.outputs.cache-hit != 'true'
    - run: npx lerna run test --scope ${{ matrix.package }}
    - name: Check for coverage files
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: packages/${{ matrix.package }}/coverage/lcov.info
    - name: Fix source paths in coverage report
      if: steps.check_files.outputs.files_exists == 'true'
      uses: visiosto/replace-value@v1
      with:
        file: packages/${{ matrix.package }}/coverage/lcov.info
        replaced: '^SF:'
        value: SF:packages/${{ matrix.package }}/
    - name: Upload coverage reports
      if: steps.check_files.outputs.files_exists == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.package }}
        path: packages/${{ matrix.package }}/coverage/lcov.info
        retention-days: 1
        
  coverage:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Clean Workspace
        uses: AutoModality/action-clean@v1
      - name: Download coverage reports
        uses: actions/download-artifact@v3.0.2
      - name: Check for coverage files
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: coverage-*/lcov.info
      - name: Build file list
        id: file_list
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          FILES=$(find coverage-* -type f | tr '\n' ',')
          echo "files=$FILES" >> $GITHUB_OUTPUT
      - name: Run codacy-coverage-reporter
        if: steps.check_files.outputs.files_exists == 'true'
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ steps.file_list.outputs.files }}
          language: typescript

  docker:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        package: ["backend", "frontend"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.package }}
          path: packages/${{ matrix.package }}/build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.package }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: docker/${{ matrix.package }}/Dockerfile
